<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  {{!-- Axios --}}
  <script src="https://cdnjs.cloudflare.com/ajax/libs/axios/0.20.0/axios.min.js" integrity="sha512-quHCp3WbBNkwLfYUMd+KwBAgpVukJu5MncuQaWXgCrfgcxCJAq/fo+oqrRKOj+UKEmyMCG3tb8RB63W+EmrOBg==" crossorigin="anonymous"></script>
  {{!-- Font awesome --}}
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.13.0/css/all.min.css"
    integrity="sha512-L7MWcK7FNPcwNqnLdZq86lTHYLdQqZaz5YcAgE+5cnGmlw8JT03QB2+oxL100UeB6RlzZLUxCGSS4/++mNZdxw== sha384-Bfad6CLCknfcloXFOyFnlgtENryhrpZCe29RTifKEixXQZ38WheV+i/6YWSzkz3V" crossorigin="anonymous" />
  {{!-- Bootstrap --}}
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@4.5.3/dist/css/bootstrap.min.css" integrity="sha384-TX8t27EcRE3e/ihU7zmQxVncDAy5uIKz4rEkgIXeMed4M0jlfIDPvg6uqKI2xXr2" crossorigin="anonymous">
  <script src="https://code.jquery.com/jquery-3.5.1.slim.min.js" integrity="sha384-DfXdz2htPH0lsSSs5nCTpuj/zy4C+OGpamoFVy38MVBnE+IbbVYUew+OrCXaRkfj" crossorigin="anonymous"></script>
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@4.5.3/dist/js/bootstrap.bundle.min.js" integrity="sha384-ho+j7jyWK8fNQe+A12Hb8AhRq26LrZ/JpcUGGOn+Y7RsweNrtN/tE3MoK7ZeZDyx" crossorigin="anonymous"></script>

  {{!-- Chart.js --}}
  <script src="https://cdn.jsdelivr.net/npm/chart.js@2.9.3/dist/Chart.min.js"></script>

  {{!-- AOS effect --}}
  <link rel="stylesheet" href="https://unpkg.com/aos@next/dist/aos.css" />

  <link rel="stylesheet" href="/css/style.css">
  <title>Get The Edge</title>
</head>
<body>
  {{> _header}}
  <div class="container mt-5">
    {{{body}}}
  </div>
<script src="https://unpkg.com/aos@next/dist/aos.js"></script>
<script>
  AOS.init({
    duration: 1000
  });
</script>
</body>

<script>
  const getRandomNumber = (min, max) => {
    return Math.floor(Math.random() * (max - min) + min);
  }

  document.addEventListener("DOMContentLoaded", function(){
    const crawlerElement = document.getElementById("start-crawl");
    if (crawlerElement) {
      let syncElement = document.querySelector('.sync-wrapper');
      crawlerElement.addEventListener('click', (e) => {
        e.preventDefault();
        console.log('crawlerElement.dataset.crawlid:', crawlerElement.dataset.crawlid);
        axios.get(`/api/crawl/start/${crawlerElement.dataset.crawlid}`)
          .then(res => {
            if (res.data.result === 'existed') {
              window.confirm('You have already crawled for today.');
            } else {
              syncElement.classList.remove('d-none');
              const checkTimer = setInterval(() => {
                axios.get(`/api/crawl/check/${crawlerElement.dataset.crawlid}`)
                  .then(res => {
                    console.log('res.data.stage:', res.data.stage)
                    if (res.data.stage === 'done') {
                      syncElement.classList.add('d-none');
                      clearInterval(checkTimer);
                      window.location.href = `/crawls/${crawlerElement.dataset.crawlid}`;
                    }
                  })
              }, 1000);
            }
          });
      });
    }

    const chartRecent = document.getElementById('chart-recent');
    if (chartRecent) {
      const crawlResults = JSON.parse(chartRecent.dataset.crawl).results;
      console.log('crawlResults:', crawlResults);
      if (crawlResults && crawlResults.length > 0) {
        const firstResultX = crawlResults[0].skills.map(keyword => keyword.keyword);
        const firstResultY = crawlResults[0].skills.map(keyword => keyword.count);
        var myChart = new Chart(chartRecent.getContext('2d'), {
          type: 'bar',
          data: {
            labels: firstResultX,
            datasets: [{
              label: 'Recent result',
              data: firstResultY,
              fill: false,
              backgroundColor: 'rgba(10, 52, 235, 0.2)',
              borderWidth: 1
            }]
          },
          options: {
            scales: {
              yAxes: [{
                beginAtZero: true,
                ticks: {
                  stepSize: 1
                },

              }],
              xAxes: [{
                gridLines: {
                  display:false
                }
              }]
            }
          }
        });
      }
    }

    const chartHistory = document.getElementById('chart-history');
    if (chartHistory) {
      // console.log('chartHistory.dataset.crawl:', chartHistory.dataset.crawl)
      const crawlResults = JSON.parse(chartHistory.dataset.crawl).results;
      if (crawlResults && crawlResults.length > 0) {
        let datasets = crawlResults[0].skills.map(keyword => ({label: keyword.keyword, fill: false, data: [], borderColor: `rgba(${getRandomNumber(30, 220)}, ${getRandomNumber(30, 220)}, ${getRandomNumber(30, 220)}, 1)`}));
        let firstResultX = []
        datasets = datasets.map((dataset, index) => {
          crawlResults.forEach(crawlResult => {
            const foundKeyword = crawlResult.skills.find(ele => ele.keyword === dataset.label);
            const dateCreatedAt = new Date(crawlResult.createdAt);
            const strCreatedAt = dateCreatedAt.getDate() + '-' + (dateCreatedAt.getMonth() + 1) + '-' + dateCreatedAt.getFullYear();
            if (index === 0) {
              firstResultX.unshift(strCreatedAt);
            }
            if (foundKeyword) {
              dataset.data.unshift(foundKeyword.count);
            } else {
              dataset.data.unshift(0);
            }
          })
          return dataset;
        })
        console.log('datasets:', datasets);

        var myChart = new Chart(chartHistory.getContext('2d'), {
          type: 'line',
          data: {
            labels: firstResultX,
            datasets: datasets
          },
          options: {
            scales: {
              yAxes: [{
                beginAtZero: true,
                ticks: {
                  stepSize: 1
                },

              }],
              xAxes: [{
                gridLines: {
                  display:false
                }
              }]
            }
          }
        });
      }
    }
  });


</script>
</html>